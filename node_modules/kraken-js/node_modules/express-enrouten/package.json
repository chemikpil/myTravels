{
  "name": "express-enrouten",
  "version": "1.1.1",
  "description": "An express route initialization and configuration module.",
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js",
    "cover": "istanbul cover tape -- test/*.js",
    "lint": "jshint -c .jshintrc index.js lib/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/krakenjs/express-enrouten.git"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "keywords": [
    "expressjs",
    "node",
    "js",
    "javascript",
    "routing"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "devDependencies": {
    "express": "^4.0.0",
    "istanbul": "^0.2.11",
    "jshint": "^2.5.1",
    "supertest": "^0.13.0",
    "tape": "^2.13.3"
  },
  "dependencies": {
    "caller": "0.0.1",
    "debuglog": "^1.0.1",
    "reverend": "^0.2.0"
  },
  "readme": "express-enrouten\n==================\n\nRoute configuration middleware for expressjs.\n\nNote: `express-enrouten >=1.0` is only compatible with `express >=4.0`.\nFor `express 3.x` support, please use `express-enrouten 0.3.x`.\n\n\n[![Build Status](https://travis-ci.org/krakenjs/express-enrouten.png)](https://travis-ci.org/krakenjs/express-enrouten)\n[![NPM version](https://badge.fury.io/js/express-enrouten.png)](http://badge.fury.io/js/express-enrouten)\n\n### API\n#### `app.use(enrouten(options))`\n```javascript\nvar express = require('express'),\n    enrouten = require('express-enrouten');\n\nvar app = express();\napp.use(enrouten({ ... }));\n// or app.use('/foo', enrouten({ ... }));\n```\n\n\n### Configuration\nexpress-enrouten supports routes via configuration and convention.\n```javascript\napp.use(enrouten({ directory: 'routes' }));\n```\n\n#### directory\nThe `directory` configuration option (optional) is the path to a directory.\nSpecify a directory to have enrouten scan all files recursively to find files\nthat match the controller-spec API. With this API, the directory structure\ndictates the paths at which handlers will be mounted.\n\n```text\ncontrollers\n |-user\n     |-create.js\n     |-list.js\n```\n```javascript\n// create.js\nmodule.exports = function (router) {\n    router.post('/', function (req, res) {\n        res.send('ok');\n    });\n};\n```\n```javascript\napp.use(enrouten({\n    directory: 'controllers'\n}));\n```\nRoutes are now:\n```test\n/user/create\n/user/list\n```\n\n#### index\nThe `index` configuration option (optional) is the path to the single file to\nload (which acts as the route 'index' of the application).\n```javascript\napp.use(enrouten({\n    index: 'routes/'\n}));\n```\n```javascript\n// index.js\nmodule.exports = function (router) {\n\n    router.get('/', index);\n    router.all(passport.protect).get('/account', account);\n\n    // etc...\n};\n```\n\n#### routes\nThe `routes` configuration option (optional) is an array of route definition objects.\nEach definition must have a `path` and `handler` property and can have an optional\n`method` property (`method` defaults to 'GET').\n\n```javascript\napp.use(enrouten({\n    routes: [\n        { path: '/',    method: 'GET', handler: require('./controllers/index') },\n        { path: '/foo', method: 'GET', handler: require('./controllers/foo') }\n    ]\n}));\n```\n\n### Named Routes\nFor `index` and `directory` configurations there is also support for named routes.\nThe normal express router that is passed in will always behave as such, but in addition\nit can be used to name a route, adding the name and path to `app.locals.enrouten.routes`.\nFor example:\n```javascript\n'use strict';\n\nmodule.exports = function (router) {\n\n    router({ path: '/user/:id', name: 'user-info' })\n        .get(function (req, res) {\n            res.send('ok');\n        });\n\n};\n```\n\n\n### Controller Files\nA 'controller' is defined as any `require`-able file which exports a function\nthat accepts a single argument. Any files with an extension of `.js` (or `.coffee`\nif CoffeeScript is registered) will be loaded and if it exports a function that\naccepts a single argument then this function will be called. **NOTE: Any file in\nthe directory tree that matches the API will be invoked/initialized with the\nexpress router object.**\n\n```javascript\n// Good :)\n// controllers/controller.js\nmodule.exports = function (router) {\n    router.get('/', function (req, res) {\n        // ...\n    });\n};\n\n// Bad :(\n// Function does not get returned when `require`-ed, use `module.exports`\nexports = function (router) {\n    // ...\n};\n\n// Bad :(\n// controllers/other-file-in-same-controller-directory.js\nmodules.exports = function (config) {\n    // `config` will be an express Router\n    // ...\n};\n\n// Acceptable :)\n// controllers/config.json - A non-js file (ignored)\n// controllers/README.txt - A non-js file (ignored)\n// controllers/util.js - A js file that has a different API than the spec (ignored)\nmodule.exports = {\n    importantHelper: function () {\n\n    }\n};\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/krakenjs/express-enrouten/issues"
  },
  "_id": "express-enrouten@1.1.1",
  "dist": {
    "shasum": "8777c1f3ea579c291ac16c6058adde176221f68f"
  },
  "_from": "express-enrouten@^1.0.0",
  "_resolved": "https://registry.npmjs.org/express-enrouten/-/express-enrouten-1.1.1.tgz"
}
