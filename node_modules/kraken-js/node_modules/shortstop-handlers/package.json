{
  "name": "shortstop-handlers",
  "version": "1.0.0",
  "description": "Common protocol handlers for use with the shortstop node module.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tape test/*.js",
    "cover": "istanbul cover tape -- test/*.js",
    "lint": "jshint -c .jshintrc index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/krakenjs/shortstop-handlers.git"
  },
  "keywords": [
    "shortstop",
    "node",
    "json"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "ertoth@paypal.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "readmeFilename": "README.md",
  "devDependencies": {
    "tape": "^2.12.3",
    "istanbul": "^0.2.7",
    "jshint": "^2.5.0"
  },
  "dependencies": {
    "glob": "^3.2.9",
    "caller": "~0.0.1",
    "core-util-is": "^1.0.1"
  },
  "readme": "# shortstop-handlers\n\nA common set of handlers for use with [shortstop](https://github.com/paypal/shortstop).\n\nNOTE: As of v1.0 `shortstop-handlers` works best with `shortstop` >=1.0. This is\ndue to the fact that as of shortstop v1.0 async handlers are now supported and\nhave subsequently been added to this module.\n\n[![Build Status](https://travis-ci.org/krakenjs/shortstop-handlers.png?branch=master)](https://travis-ci.org/krakenjs/shortstop-handlers)\n\n```javascript\nvar shortstop = require('shortstop'),\n    handlers = require('shortstop-handlers');\n\n\nvar resolver, json;\n\nresolver = shortstop.create();\nresolver.use('path',   handlers.path(__dirname));\nresolver.use('file',   handlers.file(__dirname));\nresolver.use('base64', handlers.base64());\nresolver.use('env',    handlers.env());\nresolver.use('require', handlers.require(__dirname));\nresolver.use('exec',   handlers.exec(__dirname));\n\nresolver.resolve(require('./myfile'), function (err, data) {\n    // data\n});\n```\n\n## API\n### handlers.path([basedir])\n\n* `basedir` (*String*, optional) - The base path used for resolving relative path values. Defaults to `caller` dirname.\n\nCreates a handler that can be given to shortstop to resolve file paths.\n\n```javascript\nvar foo = {\n    \"mydir\": \"path:./lib/dir\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('path', handlers.path());\nresolver.resolve(foo, function (err, data) {\n  data.mydir; // `/path/to/my/project/lib/dir`\n});\n```\n\n\n\n### handlers.file([basedir], [options])\n\n* `basedir` (*String*, optional) - The base path used for resolving relative path values. Defaults to `caller` dirname.\n* `options` (*Object*, optional) - Options object provided to fs.readFile.\n\nCreates a handler which resolves the provided value to the basedir and returns the contents of the file as a Buffer.\n\n```javascript\nvar foo = {\n    \"cert\": \"file:./cert.pem\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('file', handlers.file());\nresolver.resolve(foo, function (err, data) {\n    foo.cert; // <Buffer 48 65 6c 6c 6f 2c 20 77 6f72 6c 64 21>\n});\n```\n\n\n### handlers.base64()\n\nCreates a handler which will return a buffer containing the content of the base64-encoded string.\n\n```javascript\nvar foo = {\n    \"key\": \"base64:SGVsbG8sIHdvcmxkIQ==\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('base64', handlers.base64());\nresolver.resolve(foo, function (err, data) {\n    data.key; // <Buffer 48 65 6c 6c 6f 2c 20 77 6f72 6c 64 21>\n    data.key.toString('utf8'); // Hello, world!\n});\n```\n\n### handlers.env()\n\nCreates a handler which will resolve the provided value as an environment variable, optionally casting the value using the provided filter. Supported filters are '|d' and '|b', which will cast to Number and Boolean types respectively.\n\n```javascript\nprocess.env.HOST = 'localhost';\nprocess.env.PORT = '8000';\nprocess.env.ENABLED = 'true';\nprocess.env.FALSY = 'false'; // or '', or '0'\n\nvar foo = {\n    \"bar\": \"env:HOST\",\n    \"baz\": \"env:PORT|d\",\n    \"bam\": \"env:ENABLED|b\",\n    \"bag\": \"env:FALSY|b\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('env', handlers.env());\nresolver.resolve(foo, function (err, data) {\n    data.bar; // 'localhost'\n    data.baz; // 8000\n    data.bam; // true\n    data.bag; // false\n});\n```\n\n\n### handlers.require([basedir])\n\n* `basedir` (*String*, optional) - The base path used for resolving relative path values. Defaults to `caller` dirname.\n\nCreates a handler which resolves and loads, and returns the specified module.\n\n```javascript\nvar foo = {\n    \"path\": \"require:path\",\n    \"minimist\": \"require:minimist\",\n    \"mymodule\": \"require:./mymodule\"\n    \"json\": \"require:../config/myjson\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('require', handlers.require());\nresolver.resolve(foo, function (err, data) {\n    data.path; // Node core `path` module\n    data.minimist; // `minimist` module as loaded from node_modules\n    data.mymodule; // module as loaded from `./mymodule.js`\n    data.json; // JS object as loaded from `../config/myjson.json`\n});\n```\n\n\n### handlers.exec([basedir])\n\n* `basedir` (*String*, optional) - The base path used for resolving relative path values. Defaults to `caller` dirname.\n\nCreates a handler which resolves and loads the specified module, executing the method (if specified) or the module itself, using the return value as the resulting value. The value should have the format `{module}(#{method})?`. If no function is able to be found this handler will throw with an error.\n```javascript\nvar foo = {\n    \"item1\": \"exec:./mymodule#create\"\n    \"item2\": \"exec:./myothermodule\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('exec', handlers.exec(__dirname));\nresolver.resolve(foo, function (err, data) {\n    data.item1; // the result of calling mymodule.create()\n    data.item2; // the result of calling myothermodule()\n});\n```\n\n\n\n### handlers.glob([basedir|options])\n\n* `basedir` (*String* or *Object*, optional) - The base path use for resolving or a `glob` options object per https://github.com/isaacs/node-glob#options\n\nCreates a handler which match files using the patterns the shell uses.\n```javascript\nvar foo = {\n    \"files\": \"glob:**/*.js\"\n};\n\nvar resolver = shortstop.create();\nresolver.use('glob', handlers.glob(__dirname));\nresolver.resolve(foo, function (err, data) {\n    data[0] = '/my/dirname/foo/index.js';\n    data[1] = '/my/dirname/index.js';\n});\n```",
  "bugs": {
    "url": "https://github.com/krakenjs/shortstop-handlers/issues"
  },
  "_id": "shortstop-handlers@1.0.0",
  "dist": {
    "shasum": "cc5968fb89961da6148e1c6d4cd5be570d3970df"
  },
  "_from": "shortstop-handlers@^1.0.0",
  "_resolved": "https://registry.npmjs.org/shortstop-handlers/-/shortstop-handlers-1.0.0.tgz"
}
