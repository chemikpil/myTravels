{
  "name": "confit",
  "version": "1.2.0",
  "description": "Environment-aware configuration.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tape test/*.js",
    "cover": "istanbul cover tape -- test/*.js",
    "lint": "jshint -c .jshintrc index.js lib/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/krakenjs/confit.git"
  },
  "keywords": [
    "application",
    "configuration",
    "config"
  ],
  "author": {
    "name": "Erik Toth",
    "email": "totherik@gmail.com"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "readmeFilename": "README.md",
  "devDependencies": {
    "tape": "~2.10.2",
    "jshint": "~2.4.4",
    "istanbul": "~0.2.6"
  },
  "dependencies": {
    "minimist": "~0.0.8",
    "caller": "~0.0.1",
    "core-util-is": "~1.0.1",
    "shush": "0.0.1",
    "debuglog": "~1.0.1",
    "shortstop-handlers": "~0.1.0",
    "async": "~0.7.0",
    "shortstop": "~1.0.0"
  },
  "readme": "# confit\n\nSimple, environment-based configuration. `confit` loads a default JSON\nconfiguration file, additionally loading environment-specific files, if applicable.\nIt will also process the loaded files using any configured\n[shortstop](https://github.com/paypal/shortstop) protocol handlers.\n(See **Options** below.)\n\n[![Build Status](https://travis-ci.org/krakenjs/confit.png)](https://travis-ci.org/krakenjs/confit)\n\n## Usage\n```javascript\nvar confit = require('confit');\n```\n\n### confit([options])\n* `options` (*String* | *Object*) - the base directory in which config files live or a configuration object. If no\narguments is provided, defaults to the directory of the calling file. Signature `function (err, config) {}`\n* returns - config factory.\n\n```javascript\n'use strict';\n\nvar path = require('path');\nvar confit = require('confit');\n\nvar basedir = path.join(__dirname, 'config');\nconfit(basedir).create(function (err, config) {\n    config.get; // Function\n    config.set; // Function\n    config.use; // Function\n\n    config.get('env:env'); // 'development'\n});\n```\n\n### config factory\n* `addOverride(filepath)` (or) `addOverride(obj)` - Use this to add file (.json or .js), to merge with the config datastore and override the overlapping data if any. Alternatively, you can also pass a json object to override.\n* `addDefault(filepath)` (or) `addDefault(obj)` - Use this to add default file (.json or .js), to merge with the config datastore and serve as the default datastore. Alternatively, you can also pass a json object for defaults.\n* `create(callback)` - Creates the config object, ready for use. Callback signature: `function (err, config) {}`\n\n```javascript\n// All methods besides `create` are chainable\nconfit(options)\n    .addDefault('./mydefaults.json')  //or .addDefault({foo: 'bar'})\n    .addOverride('./mysettings.json') //or .addOverride({foo: 'baz'})\n    .create(function (err, config) {\n        // ...\n    });\n\n// - or -\n//\n// var factory = confit(options);\n// factory.addOverride('./mysettings.json');\n// factory.create(function (err, config) {\n//     // ...\n// });\n```\n\n## Options\n* `basedir` (*String*) - the base directory in which config files can be found.\n* `protocols` (*Object*) - An object containing a mapping of\n[shortstop](https://github.com/paypal/shortstop) protocols to handler implementations.\nThis protocols will be used to process the config data prior to registration.\n* `defaults` (*String*) - the name of the file containing all default values.\nDefaults to `config.json`.\n\n```javascript\n'use strict';\n\nvar path = require('path');\nvar confit = require('confit');\nvar handlers = require('shortstop-handlers');\n\n\nvar options = {\n    basedir: path.join(__dirname, 'config');\n    protocols: {\n        file: handlers.file,\n        glob: handlers.glob\n    }\n};\n\nconfit(options).create(function (err, config) {\n    // ...\n});\n```\n\n\n## Config API\n* `get(key)` - Retrieve the value for a given key. Colon-delimited keys can be used to traverse the object hierarchy.\n* `set(key, value)` - Set a value for the given key. Colon-delimited keys can be used to traverse the object hierarchy.\n* `use(obj)` - merge provided object into config.\n\n```javascript\nconfig.set('foo', 'bar');\nconfig.get('foo'); // 'bar'\n\nconfig.use({ foo: 'baz' });\nconfig.get('foo'); // 'baz'\n\nconfig.use({ a: { b: { c: 'd' } } } );\nconfig.get('a:b:c'); // 'd'\n```\n\n## Default Behavior\nBy default, `confit` loads `process.env` and `argv` values upon initialization. Additionally,\nit creates convenience environment properties prefixed with `env:` based on the\ncurrent `NODE_ENV` setting, defaulting to `development`. It also normalizes\n`NODE_ENV` settings to the long form, so `dev` becomes `development`, `prod`\nbecomes `production`, etc.\n```javascript\n// NODE_ENV='dev'\nconfig.get('NODE_ENV');        // 'dev'\nconfig.get('env:env');         // 'development'\nconfig.get('env:development'); // true\nconfig.get('env:test');        // false\nconfig.get('env:staging');     // false\nconfig.get('env:production');  // false\n```\n\n```javascript\n// NODE_ENV='custom'\nconfig.get('NODE_ENV');        // 'custom'\nconfig.get('env:env');         // 'custom'\nconfig.get('env:development'); // false\nconfig.get('env:test');        // false\nconfig.get('env:staging');     // false\nconfig.get('env:production');  // false\nconfig.get('env:custom');      // true\n```\n",
  "bugs": {
    "url": "https://github.com/krakenjs/confit/issues"
  },
  "_id": "confit@1.2.0",
  "dist": {
    "shasum": "00feea1a87e9948c1be4a13b1cc9cda708d21c30"
  },
  "_from": "confit@^1.1.0",
  "_resolved": "https://registry.npmjs.org/confit/-/confit-1.2.0.tgz"
}
